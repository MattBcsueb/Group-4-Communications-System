Server
------
Attributes:
No Server class specific attributes. It just starts the threads

CLASS WITHIN SERVER:
ClientHandler
-------------
Attributes:
- Socket clientSocket
- User localUser
- boolean authenticated
- File chatHistory (used to log all Messages)
- static ArrayList<User> allUsers (all the Users)
- static ArrayList<ChatRoom> allChatRooms (all the ChatRooms)
- static HashMap<String, ObjectOutputStrings> outputStreams (maps User.name to their ObjectOutputStream)
- static HashMap<String, Socket> userSockets (maps User.name to their sockets)

Methods:
+ ClientHandler(Socket) - constructor

+ run() - the thread's main basically. Authenticates the User, runs the switch statement which directs Messages 	 
          based on type

+ void saveUser(User) - Adds new Users/Supervisors to the file which contains all the login info

+ void loadUsers(Array<User> allUsers) - Loads the Users from the login info file when the Server starts up

+ void updateUserFile() - Updates the login file. Gets called after password changes so they persist upon 
			  Server crash

+ void logMessage(Message, String) - Writes CHATROOM type Messages and their corresponding rooms to the master log 				    
                                     file
+ void retrieveLogs(ObjectOutputStream) - Returns the master logs

===================================================================================================================
ChatRoom
--------
Attributes:
- String roomName
- ArrayList<User> chatUsers (Everyone who is a member of the room)
- HashMap<String, ObjectOutputStream> outputStreams (Maps User.name to their ObjectOutputStream since they are not Serializable)
- boolean chatLocked
- int activeUserCount (Used for read receipts)
- User host
- File chatFile (log of each individual ChatRoom)

Methods:
+ void addUser(User, ObjectOutputStream)

+ void sendMessage(Message)... goes through and matches the names in chatUsers to their ObjectOutputStreams in the HashMap

+ String getRoomName()

+ void logMessage(Message)

+ void reloadHistoryForUser(User)... takes the chat history from the log and outputs it to Users when they log back in

+ void setChatLock(User)... locks the chat if the requesting User is the room owner

+ void setChatUnlock(User)... unlocks the chat if the requesting User is the room owner

+ boolean isLocked()... Server uses to check if the room is locked

+ void removeUser()

+ int getActiveUserCount()... used for read receipts

+ void incrementActiveCount()

+ void decrementActiveCount()



