Extended Class information:

MESSAGE TYPES:
   - LOGIN
   - CHATROOM
   - DISPLAYCHATROOMS
   - JOINCHATROOM
   - CREATECHATROOM
   - CHANGEPASSWORD
   - NEWUSER
   - NEWSUPERVISOR
   - DISPLAYUSERS
   - RETRIEVELOGS (Will only succeed if the requesting User is actually a Supervisor)
   - DELETEUSER (Will only succeed if the requesting User is actually a Supervisor)
   - CREATEUSER (Will only succeed if the requesting User is actually a Supervisor)
   - VERIFIED (Set by Server only!)
   - FAILED (Set by Server only!)

1. Supervisor
   - Must be a subclass of User
   - The special privileges of the Supervisor are accessed through the Client, so these functions should not belong to a Supervisor object.
     We will just check if the requesting User is actually a Supervisor or not when processing the requests for logs, password changes,
     creating new Users, and deleting Users.

2. User
   - The User object needs to know its activeChatroom so that the ChatRooms know whether or not to actually send a Message to that User


3. Client
   - Step 1 needs to be user authentication. Think "while loop until the LOGIN Message is returned with status VERIFIED." This will require 
     you to be able to both send Messages (ObjectOutputStream object) and receive Messages (ObjectInputStream). You can only have one of these
     per thread, so you should create both before authentication occurs and then once the User is authenticated. 

     You need to be able to receive and send Messages at the same time, so we require two threads (one for input, one for output). If you look
     at my Server example, you will see that I made the input it's own class which is ran as a separate thread. FOR THIS YOU MUST PASS THE 
     ObjectInputStream OBJECT YOU CREATED AT THE START OF THE CLIENT PROGRAM TO THE CONSTRUCTOR OTHERWISE IT WILL STOP WORKING. 

   - You may then prompt for the User's choice between the following functions

     -----> createChatRoom() should send the Server a Message of type CREATECHATROOM with the text attribute being the desired name of the Chat Room.
            If the name is taken, the Server will return the Message with status FAILED if the name was taken, or VERIFIED if the name was free and
            the room was successfully created. This process will automatically set the User's activeChatRoom to this ChatRoom.


     -----> joinChatRoom() should send the Server a Message of type DISPLAYCHATROOMS. The Message's text does not matter. The Server will return
            the same Message, but with an array of Strings (where each String is the name of the ChatRoom). I believe an array is the right
            choice for this because it will allow us to have one button for each option when the time comes to implement the GUI part of this.
            Until then, you should prompt the User for the name of the ChatRoom they wish to enter, put this as the text attribute of a Message
	    of type JOINCHATROOM, and send it. (Then, wait for the Message back with type VERIFIED). The User should now be free to type whatever,
            but you need to send these as CHATROOM Messages. ***The Server will then set the User's activeChatRoom to this ChatRoom***

	    Since the User is now in a ChatRoom, you will start receiving Messages sent to that ChatRoom. This means you are receiving Messages of 
            type CHATROOM.

	    I do not know how it works with GUIs, but at this point we should find a way to clear all the text which is currently on the screen or
            something like that. This issue is something which can wait until the end for sure. Maybe for the time being output something to indicate
            the User changed to a new channel. It doesn't really matter, but it may help you confirm it is working.

     -----> changePassword() should send the Server a Message of type CHANGEPASSWORD. Since we do not REALLY care about security, you just need
	    to set the text attribute to the desired password (we will not authenticate the old password - it will just be overwritten).

     -----> displayUsers() should send the Server a Message of type DISPLAYUSERS, and the Message will be returned with a list of all User's names as
            the Message's text attribute.

     -----> deleteUser() should send the Server a Message of type DELETEUSER and a text attribute of the name of the User to be deleted. This will only
            work if the requesting person is a Supervisor, so you will either get the Message back with status FAILED (it was a User requesting the change)
            or with status VERIFIED (it was a Supervisor). You can output failure/success messages accordingly.

     -----> createUser() is just like above but of type CREATEUSER. You will get it back as FAILED or VERIFIED accordingly. 

           
     

4. ChatRoom
   - I would ignore the inviteUser() function until the very end.
   - I am not yet sure how we should implement setChatLock/Unlock() using GUI features. Text commands like ::lockchat ::unlockchat would be easy but I'm not
     sure if he would like us using text commands for a GUI program. The same applies for removeUser(). 
   - Other functions:
     -----> Constructors: INPUT: 1 User, 1 Message.
                          You should take in a single User, add them to the ArrayList chatUsers, and then set the ChatRoom's userHost to this user. You also
                          set the roomName attribute to the text attribute of the Message (read above in joinChatRoom() to see how this works). 
     
     -----> addUser() you add the User to the ArrayList. This ChatRoom will be the User's ChatRoom at this moment (the Server does this), but that may change
            over time. Thankfully, the ArrayList contains references to users, which we will leverage in sendMessage().

     -----> sendMessage() gives you the Message of type CHATROOM and the User who sent it. You must then send this message to the entire ArrayList of the ChatRoom's Users
            BUT ONLY THE ONES WHOSE activeChatRoom IS THIS CHANNEL. Once a Message gets to the ChatRoom, it will have a User connected to it. You can use Message.getUser().getactuveC
            If they are the same, you send the Message to the ObjectOutputStream of that User (userName.getObjectOutputStream()). The Message should be of type
            CHATROOM (so that the Client knows it needs to be outputting it to the User). The Client deals with extracting the text from this Message. 
	
            ** The Server will add the sending User's name to the front of text of the Message, so ultimately the Client will output something like 'Owen: hello everyone' **

     -----> getRoomName() is used by the Server to find out which ChatRoom to call sendMessage() on.

     -----> logMessage() can write the Message's text attribute to a file. Again, the Server will have inputted the name, so you could probably just append this to a file as is.

     -----> reloadHistoryForUser() would allow new User's to see the history of the chat. There will probably be some fuckery with writing to/reading from a file at some point,
            but I envision this as being read into a String with good formatting, setting the text attribute of a Message of type CHATROOM to this String, and then sending it
            to the User. This should also be used for Users who are logging back in, but I do not yet see the best way to do this. 
     




5. Message
   - Default attribute for status, sender, and roomList attributes should be null. The Server will set these.
   - The only constructor should be one which takes in the type and text.
   - Notice that setType is private --- the type MUST be set when the Message is created and it must never change.

  





